// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SpaceKit
import ARKit
import Combine
import CoreGraphics
import CoreLocation
import Foundation
import SceneKit
@_exported import SpaceKit
import Swift
import UIKit.UIImage
import UIKit
import UIKit.UIViewController
import Vision.VNTypes
import Vision
import _Concurrency
public struct SpaceKitViewControllerFactory {
  public init(context: SpaceKit.Context)
  public func make() -> SpaceKit.SpaceKitViewController
}
public typealias SpaceKitImage = UIKit.UIImage
public struct Destination : Swift.Equatable {
  public let identifier: Swift.String
  public let displayName: Swift.String
  public let icon: SpaceKit.SpaceKitImage?
  public init(identifier: Swift.String, displayName: Swift.String, icon: SpaceKit.SpaceKitImage?)
  public static func == (a: SpaceKit.Destination, b: SpaceKit.Destination) -> Swift.Bool
}
public protocol SpaceKitListDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.Destination])
}
public enum Requisite : Swift.CaseIterable {
  case locationPermission
  case preciseLocationPermission
  case backgroundLocationPermisson
  case cameraPermission
  public static func == (a: SpaceKit.Requisite, b: SpaceKit.Requisite) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SpaceKit.Requisite]
  public static var allCases: [SpaceKit.Requisite] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SpaceKitRequisitesDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, requiresRequisites: [SpaceKit.Requisite])
}
final public class SpaceKitVenue {
  public init(from url: Foundation.URL)
  @objc deinit
}
extension SpaceKit.SpaceKitVenue : SpaceKit.Venue {
  final public func fetchMetadata(completion: (Swift.Result<SpaceKit.VenueMetadata, Swift.Error>) -> Swift.Void)
}
extension ARKit.ARSCNView {
  @_Concurrency.MainActor(unsafe) public var userSceneHeading: Swift.Float? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var userVerticalOrientation: Swift.Float {
    get
  }
}
public struct SpaceKitContextFactory {
  public init(venue: SpaceKit.Venue)
  public func make(completion: (Swift.Result<SpaceKit.Context, Swift.Error>) -> Swift.Void)
}
public struct ScanResult {
  public let stringValue: Swift.String
  public let symbology: Vision.VNBarcodeSymbology
  public init(stringValue: Swift.String, symbology: Vision.VNBarcodeSymbology)
}
public protocol SpaceKitBarcodeDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, didScanBarcodeWithResult: SpaceKit.ScanResult)
  func spaceKitContext(_ context: SpaceKit.Context, didScanBarcodeWithError: Swift.Error)
}
public struct VenueManagerConfiguration {
  public let organizationIdentifier: Swift.String
  public init(organizationIdentifier: Swift.String)
}
public protocol LocalVenue {
  var identifier: Swift.String { get }
  var name: Swift.String { get }
  var region: SpaceKit.LocalVenueRegion { get }
}
public protocol LocalVenueRegion {
  var radiusMeters: Swift.Int { get }
  var centrePoint: CoreLocation.CLLocationCoordinate2D { get }
}
public struct VenueMetadata {
  public init(hash: Swift.String, timestamp: Foundation.Date)
}
public protocol Venue {
  func fetchMetadata(completion: (Swift.Result<SpaceKit.VenueMetadata, Swift.Error>) -> Swift.Void)
}
public protocol VenueManager {
  init(configuration: SpaceKit.VenueManagerConfiguration)
  func fetchLocalVenues(forLocation coordinates: CoreLocation.CLLocationCoordinate2D, completion: @escaping (Swift.Result<[SpaceKit.LocalVenue], Swift.Error>) -> Swift.Void)
  func fetchMetadata(forVenueWithIdentifier venueIdentifier: Swift.String, completion: @escaping (Swift.Result<SpaceKit.VenueMetadata, Swift.Error>) -> Swift.Void)
  func fetchVenue(forVenueWithIdentifier venueIdentifier: Swift.String, completion: @escaping (Swift.Result<SpaceKit.Venue, Swift.Error>) -> Swift.Void)
}
public struct VenueManagerFactory {
  public func make() -> SpaceKit.VenueManager
}
public struct SpaceKitLocalVenue : SpaceKit.LocalVenue {
  public let identifier: Swift.String
  public let name: Swift.String
  public let region: SpaceKit.LocalVenueRegion
}
public struct SpaceKitLocalVenueRegion : SpaceKit.LocalVenueRegion {
  public let radiusMeters: Swift.Int
  public let centrePoint: CoreLocation.CLLocationCoordinate2D
}
public protocol Context : AnyObject {
  var requisitesDelegate: SpaceKit.SpaceKitRequisitesDelegate? { get set }
  var listDelegate: SpaceKit.SpaceKitListDelegate? { get set }
  var barcodeDelegate: SpaceKit.SpaceKitBarcodeDelegate? { get set }
  func setDestinations(_ destinations: [SpaceKit.Destination])
  func requestUnfulfilledRequisites(from requisites: [SpaceKit.Requisite])
}
public protocol SpaceKitViewController : UIKit.UIViewController {
}
extension SpaceKit.Requisite : Swift.Equatable {}
extension SpaceKit.Requisite : Swift.Hashable {}
