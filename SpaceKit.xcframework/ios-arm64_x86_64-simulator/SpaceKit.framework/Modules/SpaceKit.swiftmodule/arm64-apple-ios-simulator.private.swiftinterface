// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SpaceKit
import ARKit
import ARTheme
import AVFoundation
import Combine
import CoreLocation
import CoreVideo
import CryptoKit
import DeveloperToolsSupport
import Foundation
import GameplayKit
import Lottie
import SceneKit
@_exported import SpaceKit
import Swift
import SwiftUI
import Theme
import UIKit.UIImage
import UIKit
import UIKit.UIViewController
import Vision.VNTypes
import Vision
import _Concurrency
import _RealityKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import simd
public typealias InfoViewFactory = () -> any SpaceKit.InfoView
public typealias RecenterButtonFactory = () -> any SpaceKit.RecenterButton
public typealias LevelSwitcherFactory = (_ levelOrdinals: [Swift.Int]) -> (any SpaceKit.LevelSwitcher)?
@_Concurrency.MainActor public struct SpaceKitViewControllerFactory {
  @_Concurrency.MainActor public var demoConfiguration: Any?
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default, levelSwitcherFactory: @escaping SpaceKit.LevelSwitcherFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, levelSwitcherFactory: @escaping SpaceKit.LevelSwitcherFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory, levelSwitcherFactory: @escaping SpaceKit.LevelSwitcherFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  @_Concurrency.MainActor public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory, levelSwitcherFactory: @escaping SpaceKit.LevelSwitcherFactory, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  @_Concurrency.MainActor public func make() -> any SpaceKit.SpaceKitViewController
}
public typealias SpaceKitImage = UIKit.UIImage
public struct DestinationAdditionalInfoKey {
  public static let aisleName: Swift.String
  public static let levelOrdinal: Swift.String
}
public protocol DestinationProtocol {
  var identifier: Swift.String { get }
  var displayName: Swift.String { get }
  var icon: SpaceKit.SpaceKitImage? { get }
  var priority: SpaceKit.SpaceKitDestination.Priority { get }
  var additionalInfo: [Swift.String : Any] { get }
  var userInfo: [Swift.String : Any] { get }
  init(identifier: Swift.String, displayName: Swift.String, icon: SpaceKit.SpaceKitImage?, priority: SpaceKit.SpaceKitDestination.Priority, userInfo: [Swift.String : Any])
}
@available(*, deprecated, renamed: "SpaceKitDestination", message: "`Destination` has been renamed `SpaceKitDestination`. This will break in future versions.")
public typealias Destination = SpaceKit.SpaceKitDestination
public struct SpaceKitDestination : SpaceKit.DestinationProtocol {
  public enum Priority {
    case first
    case last
    case unspecified
    public static func == (a: SpaceKit.SpaceKitDestination.Priority, b: SpaceKit.SpaceKitDestination.Priority) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let identifier: Swift.String
  public let displayName: Swift.String
  public let icon: SpaceKit.SpaceKitImage?
  public let priority: SpaceKit.SpaceKitDestination.Priority
  public var additionalInfo: [Swift.String : Any] {
    get
  }
  public let userInfo: [Swift.String : Any]
  public init(identifier: Swift.String, displayName: Swift.String, icon: SpaceKit.SpaceKitImage?, priority: SpaceKit.SpaceKitDestination.Priority = .unspecified, userInfo: [Swift.String : Any] = [:])
}
public struct LevelTransition : Swift.Equatable {
  public let traversalOption: SpaceKit.TraversalOption
  public let originOrdinal: Swift.Int
  public let destinationOrdinal: Swift.Int
  public static func == (a: SpaceKit.LevelTransition, b: SpaceKit.LevelTransition) -> Swift.Bool
}
public protocol SpaceKitListDelegate : AnyObject {
  @available(*, deprecated, renamed: "spaceKitContext(_:didUpdateOrderedDestinations:withLevelTransitions:failures:)")
  func spaceKitContext(_ context: any SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.SpaceKitDestination], with levelTransitions: [[SpaceKit.LevelTransition]])
  func spaceKitContext(_ context: any SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.SpaceKitDestination], withLevelTransitions levelTransitions: [[SpaceKit.LevelTransition]], failures: [SpaceKit.RoutingFailure])
}
extension SpaceKit.SpaceKitListDelegate {
  public func spaceKitContext(_ context: any SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.SpaceKitDestination], with levelTransitions: [[SpaceKit.LevelTransition]])
  public func spaceKitContext(_ context: any SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.SpaceKitDestination], withLevelTransitions levelTransitions: [[SpaceKit.LevelTransition]], failures: [SpaceKit.RoutingFailure])
}
public enum RoutingFailure : Swift.Equatable {
  case couldNotRouteToDestination(identifier: Swift.String)
  public static func == (a: SpaceKit.RoutingFailure, b: SpaceKit.RoutingFailure) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SpaceKitSDK {
  #if compiler(>=5.3) && $AsyncAwait
  public static func clearCaches() async
  #endif
  public static var version: Swift.String {
    get
  }
  @objc deinit
}
extension SpaceKit.SpaceKitDestination : Swift.Equatable {
  public static func == (lhs: SpaceKit.SpaceKitDestination, rhs: SpaceKit.SpaceKitDestination) -> Swift.Bool
}
public struct InfoViewModelFactory {
}
public class SpaceKitActionButtonItem : Combine.ObservableObject {
  final public let id: Foundation.UUID
  @Combine.Published @_projectedValueProperty($title) public var title: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $title: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($image) public var image: UIKit.UIImage? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $image: Combine.Published<UIKit.UIImage?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isHidden) public var isHidden: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isHidden: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($accessibilityIdentifier) public var accessibilityIdentifier: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $accessibilityIdentifier: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($accessibilityLabel) public var accessibilityLabel: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $accessibilityLabel: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($accessibilityHint) public var accessibilityHint: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $accessibilityHint: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var primaryAction: ((SpaceKit.SpaceKitActionButtonItem) -> ())?
  public init(title: Swift.String, accessibilityIdentifier: Swift.String? = nil, accessibilityLabel: Swift.String? = nil, accessibilityHint: Swift.String? = nil, image: UIKit.UIImage? = nil, factory: SpaceKit.SpaceKitActionButtonFactory = .default, primaryAction: ((SpaceKit.SpaceKitActionButtonItem) -> ())? = nil)
  convenience public init(title: Swift.String, accessibilityIdentifier: Swift.String? = nil, accessibilityLabel: Swift.String? = nil, accessibilityHint: Swift.String? = nil, systemImageName: Swift.String, factory: SpaceKit.SpaceKitActionButtonFactory = .default, primaryAction: ((SpaceKit.SpaceKitActionButtonItem) -> ())? = nil)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SpaceKit.SpaceKitActionButtonItem : Swift.Hashable {
  public static func == (lhs: SpaceKit.SpaceKitActionButtonItem, rhs: SpaceKit.SpaceKitActionButtonItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpaceKitActionButtonFactory {
  case `default`
  case custom(((SpaceKit.SpaceKitActionButtonItem) -> UIKit.UIView))
}
public enum Requisite : Swift.Int, Swift.CaseIterable {
  public static var allCases: [SpaceKit.Requisite]
  case locationPermission
  case preciseLocationPermission
  @available(iOS, obsoleted: 13.0, message: "SpaceKit does not use 'Always' location permission. It is recommended to enable the 'Location Updates' background mode in applications that use SpaceKit.")
  case backgroundLocationPermission
  case cameraPermission
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SpaceKit.Requisite]
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "The delegate pattern for interrogating requisites has been deprecated. Instead use static function `Requisite.requestUnfulfilledRequisites()`.")
public protocol SpaceKitRequisitesDelegate : AnyObject {
  @available(*, deprecated, message: "Replace with async static function `Requisite.requestUnfulfilledRequisites()`.")
  func spaceKitContext(_ context: any SpaceKit.Context, requiresRequisites requisites: [SpaceKit.Requisite])
}
extension SpaceKit.Requisite {
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestUnfulfilledRequisites(from requisites: [SpaceKit.Requisite]) async -> [SpaceKit.Requisite]
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncForEach(_ operation: (Self.Element) async throws -> Swift.Void) async rethrows
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentForEach(withPriority priority: _Concurrency.TaskPriority? = nil, _ operation: @escaping (Self.Element) async -> Swift.Void) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentForEach(withPriority priority: _Concurrency.TaskPriority? = nil, _ operation: @escaping (Self.Element) async throws -> Swift.Void) async throws
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncMap<T>(_ transform: (Self.Element) async throws -> T) async rethrows -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T) async -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T) async throws -> [T]
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncCompactMap<T>(_ transform: (Self.Element) async throws -> T?) async rethrows -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentCompactMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T?) async -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentCompactMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T?) async throws -> [T]
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncFlatMap<T>(_ transform: (Self.Element) async throws -> T) async rethrows -> [T.Element] where T : Swift.Sequence
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentFlatMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T) async -> [T.Element] where T : Swift.Sequence
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentFlatMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T) async throws -> [T.Element] where T : Swift.Sequence
  #endif
}
public protocol EventTrigger {
}
public protocol EventFactory {
  func makeEvent(_ trigger: any SpaceKit.EventTrigger, handler: @escaping () -> Swift.Void) -> any SpaceKit.SubscriptionEvent
}
public protocol RecenterButton : UIKit.UIControl {
  func setIsMapTrackingUser(_ isTracking: Swift.Bool)
}
extension Swift.String {
  @backDeployed(before: iOS 15)
  public init(localized localizationKey: Swift.String, table: Swift.String? = nil, bundle: Foundation.Bundle? = nil, locale: Foundation.Locale = .current, comment: Swift.StaticString? = nil) {
		self = NSLocalizedString(
			localizationKey,
			tableName: table,
			bundle: bundle ?? .main,
			comment: comment?.description ?? ""
		)
	}
}
@_hasMissingDesignatedInitializers final public class SpaceKitVenue {
  @available(swift, deprecated: 1.0, obsoleted: 1.0, message: "You must now use VenueManagerFactory to create a venue manager and call VenueManager.fetchVenue(forVenueWithIdentifier:) to instantiate a venue.")
  public init(from url: Foundation.URL)
  @objc deinit
}
extension SpaceKit.SpaceKitVenue : SpaceKit.Venue {
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchMetadata() async throws -> any SpaceKit.VenueMetadata
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func rawData() async throws -> Foundation.Data
  #endif
}
public protocol InfoViewIcon : AnyObject {
  var image: UIKit.UIImage? { get set }
}
public protocol InfoViewLabel : AnyObject {
  var text: Swift.String? { get set }
}
public protocol InfoViewButton : AnyObject {
  func addAction(_ action: @escaping () -> Swift.Void)
}
public protocol InfoView : UIKit.UIView {
  var iconView: (any SpaceKit.InfoViewIcon)? { get }
  var displayNameLabel: (any SpaceKit.InfoViewLabel)? { get }
  var detailLabel: (any SpaceKit.InfoViewLabel)? { get }
  var gotItButton: (any SpaceKit.InfoViewButton)? { get }
  var contentView: UIKit.UIView? { get }
  var contentUnavailableView: UIKit.UIView? { get }
}
extension SpaceKit.InfoView {
  public var detailLabel: (any SpaceKit.InfoViewLabel)? {
    get
  }
  public var contentView: UIKit.UIView? {
    get
  }
  public var contentUnavailableView: UIKit.UIView? {
    get
  }
}
extension UIKit.UILabel : SpaceKit.InfoViewLabel {
}
extension UIKit.UIControl : SpaceKit.InfoViewButton {
  @_Concurrency.MainActor(unsafe) public func addAction(_ action: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class SpaceKitSubscriptionToken : Swift.Hashable {
  public static func == (lhs: SpaceKit.SpaceKitSubscriptionToken, rhs: SpaceKit.SpaceKitSubscriptionToken) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public protocol SubscriptionEvent {
  var onFulfill: () -> Swift.Void { get set }
  func onSubscribe()
  func evaluateFulfilled() -> Swift.Bool
}
public protocol LevelSwitcher : UIKit.UIView {
  var setLevelOrdinalHandler: (Swift.Int) -> Swift.Void { get set }
  func spaceKitDidSetDisplayLevelOrdinal(_ ordinal: Swift.Int)
}
@available(*, deprecated, message: "SpaceKit will allow background location updates automatically if your app has registered the background location capability.")
public protocol SpaceKitLocationDelegate : AnyObject {
  @available(*, deprecated, message: "SpaceKit will allow background location updates automatically if your app has registered the background location capability.")
  func spaceKitContextShouldAllowBackgroundLocationUpdates(_ context: any SpaceKit.Context) -> Swift.Bool
}
extension ARKit.ARSCNView {
  @_Concurrency.MainActor(unsafe) public var userSceneHeading: Swift.Float? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var userVerticalOrientation: Swift.Float {
    get
  }
}
public protocol UnixTimestampedMetadata {
  var timestampUnix: Swift.Double { get }
  var timestamp: Foundation.Date { get }
}
extension SpaceKit.UnixTimestampedMetadata {
  public var timestamp: Foundation.Date {
    get
  }
}
public struct Theme : Swift.Codable {
  public enum CornerStyle : Swift.String, Swift.Codable {
    case square
    case semiRounded
    case rounded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Font : Swift.Codable {
    case `default`
    public static func == (a: SpaceKit.Theme.Font, b: SpaceKit.Theme.Font) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ThemeColor : Swift.Codable {
    public init(base: UIKit.UIColor, light: UIKit.UIColor, dark: UIKit.UIColor)
    public let base: UIKit.UIColor
    public let light: UIKit.UIColor
    public let dark: UIKit.UIColor
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public let primaryColor: SpaceKit.Theme.ThemeColor
  public let secondaryColor: SpaceKit.Theme.ThemeColor
  public let cornerStyle: SpaceKit.Theme.CornerStyle
  public let font: SpaceKit.Theme.Font
  public let arTheme: ARTheme.ARTheme
  public let mapTheme: Theme.MapTheme
  public init(primaryColor: SpaceKit.Theme.ThemeColor, secondaryColor: SpaceKit.Theme.ThemeColor, cornerStyle: SpaceKit.Theme.CornerStyle, font: SpaceKit.Theme.Font, arTheme: ARTheme.ARTheme, mapTheme: Theme.MapTheme)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SpaceKit.Theme {
  public static let `default`: SpaceKit.Theme
}
public struct SpaceKitContextFactory {
  @available(*, deprecated, message: "`isDebugEnabled` parameter has been obsoleted by configuration files. This initialiser will be removed in future versions. Please use `SpaceKitContextFactory.init(venue:configurationFileURL:)` instead.")
  public init(venue: any SpaceKit.Venue, isDebugEnabled: Swift.Bool)
  public init(venue: any SpaceKit.Venue, configurationFileURL: Foundation.URL? = nil, apiKey: Swift.String? = nil)
  public init(venue: any SpaceKit.Venue, configuration: [SpaceKit.ConfigurationKey : Any] = [:], apiKey: Swift.String? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func make() async throws -> any SpaceKit.Context
  #endif
}
public enum SpaceKitViewKey : Swift.String {
  case levelSwitcher
  case buttonStack
  case secondaryButtonStack
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SpaceKitLayout {
  func layoutLevelSwitcher(views: [SpaceKit.SpaceKitViewKey : UIKit.UIView], inLayoutGuide layoutGuide: UIKit.UILayoutGuide)
  func layoutButtonStack(views: [SpaceKit.SpaceKitViewKey : UIKit.UIView], inLayoutGuide layoutGuide: UIKit.UILayoutGuide)
}
public struct StaticMapViewControllerFactory {
  public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default)
  public init(context: any SpaceKit.Context, theme: SpaceKit.Theme = .default, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  public init(context: any SpaceKit.Context, layout: any SpaceKit.SpaceKitLayout, theme: SpaceKit.Theme = .default, levelSwitcherFactory: @escaping SpaceKit.LevelSwitcherFactory, recenterButtonFactory: @autoclosure @escaping SpaceKit.RecenterButtonFactory)
  public func make() -> any SpaceKit.SpaceKitViewController
}
public struct ScanResult : Swift.Equatable {
  public let stringValue: Swift.String
  public let symbology: Vision.VNBarcodeSymbology
  public init(stringValue: Swift.String, symbology: Vision.VNBarcodeSymbology)
  public static func == (a: SpaceKit.ScanResult, b: SpaceKit.ScanResult) -> Swift.Bool
}
public protocol SpaceKitBarcodeDelegate : AnyObject {
  func spaceKitContext(_ context: any SpaceKit.Context, didScanBarcodeWithResult result: SpaceKit.ScanResult)
  func spaceKitContext(_ context: any SpaceKit.Context, didScanBarcodeWithError error: any Swift.Error)
}
public struct VenueManagerConfiguration {
  public let organizationIdentifier: Swift.String
  public init(organizationIdentifier: Swift.String, apiKey: Swift.String, apiSharedSecret: Swift.String)
  public init(dictionary: [Swift.String : Any?]) throws
}
extension SpaceKit.VenueManagerConfiguration : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol LocalVenue {
  var identifier: Swift.String { get }
  var name: Swift.String { get }
  var region: any SpaceKit.LocalVenueRegion { get }
}
public protocol LocalVenueRegion {
  var radiusMeters: Swift.Int { get }
  var centrePoint: CoreLocation.CLLocationCoordinate2D { get }
}
public protocol VenueMetadata {
  var hash: Swift.String { get }
  var timestamp: Foundation.Date { get }
  var timestampUnix: Swift.Double { get }
}
public protocol Venue {
  #if compiler(>=5.3) && $AsyncAwait
  func fetchMetadata() async throws -> any SpaceKit.VenueMetadata
  #endif
}
public protocol VenueManager {
  init(configuration: SpaceKit.VenueManagerConfiguration)
  #if compiler(>=5.3) && $AsyncAwait
  func fetchLocalVenues(forLocation location: CoreLocation.CLLocationCoordinate2D, searchRadius: Swift.Int, limit: Swift.Int) async throws -> [any SpaceKit.LocalVenue]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func fetchMetadata(forVenueWithIdentifier venueIdentifier: Swift.String) async throws -> any SpaceKit.VenueMetadata
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(*, deprecated, renamed: "fetchVenue(forVenueWithIdentifier:)")
  @discardableResult
  func fetchVenue(forVenueWithIdentifier venueIdentifier: Swift.String, destinationPath: Swift.String) async throws -> any SpaceKit.Venue
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  func fetchVenue(forVenueWithIdentifier venueIdentifier: Swift.String) async throws -> any SpaceKit.Venue
  #endif
}
@available(*, deprecated, renamed: "SpaceKitVenueManagerError")
public typealias SpacekitVenueManagerError = SpaceKit.SpaceKitVenueManagerError
public enum SpaceKitVenueManagerError : Swift.Error {
  case invalidDestinationPath
  case networkError(_: any Foundation.LocalizedError)
}
extension SpaceKit.SpaceKitVenueManagerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VenueManagerFactory {
  public init(configuration: SpaceKit.VenueManagerConfiguration)
  public func make() -> any SpaceKit.VenueManager
}
public struct SpaceKitVenueMetadata : SpaceKit.VenueMetadata, SpaceKit.UnixTimestampedMetadata {
  public let hash: Swift.String
  public let version: Swift.Int
  public let timestampUnix: Swift.Double
}
public struct SpaceKitLocalVenue : SpaceKit.LocalVenue {
  public let identifier: Swift.String
  public let name: Swift.String
  public let region: any SpaceKit.LocalVenueRegion
}
public struct SpaceKitLocalVenueRegion : SpaceKit.LocalVenueRegion {
  public let radiusMeters: Swift.Int
  public let centrePoint: CoreLocation.CLLocationCoordinate2D
}
public protocol Context : AnyObject, SpaceKit.EventFactory {
  @available(*, deprecated, message: "The delegate pattern for interrogating requisites has been deprecated. Instead use static function `Requisite.requestUnfulfilledRequisites()`.")
  var requisitesDelegate: (any SpaceKit.SpaceKitRequisitesDelegate)? { get set }
  var listDelegate: (any SpaceKit.SpaceKitListDelegate)? { get set }
  var barcodeDelegate: (any SpaceKit.SpaceKitBarcodeDelegate)? { get set }
  @available(*, deprecated, message: "SpaceKit will allow background location updates automatically if your app has registered the background location capability. Setting this property will have no effect.")
  var locationDelegate: (any SpaceKit.SpaceKitLocationDelegate)? { get set }
  var mapDelegate: (any SpaceKit.SpaceKitMapDelegate)? { get set }
  func setRoutingOptions(_ options: SpaceKit.RoutingOptions)
  func setDestinations(_ destinations: [SpaceKit.SpaceKitDestination])
  func requestUnfulfilledRequisites(from requisites: [SpaceKit.Requisite])
  func subscribeToEvent(_ subscriptionEvent: any SpaceKit.SubscriptionEvent) -> SpaceKit.SpaceKitSubscriptionToken
  func unsubscribeFromEventWithSubscriptionToken(_ subscriptionToken: SpaceKit.SpaceKitSubscriptionToken)
  func updateAnnotations()
  func createHeatMap(aliases: [Swift.String], threshold: Swift.Double) -> SpaceKit.HeatMap
  func requestDataPointForHeatMap(_ heatMap: SpaceKit.HeatMap)
}
public struct RoutingOptions {
  public init(traversalOptions: Swift.Set<SpaceKit.TraversalOption>)
}
public enum MapAnnotationState {
  case normal
  case highlighted
  public static func == (a: SpaceKit.MapAnnotationState, b: SpaceKit.MapAnnotationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SpaceKitMapDelegate : AnyObject {
  @available(*, deprecated, renamed: "spaceKitContext(_:didTapAnnotationWithAlias:onLevelOrdinal:)")
  func spaceKitContext(_ context: any SpaceKit.Context, didTapAnnotationWithAlias alias: Swift.String)
  func spaceKitContext(_ context: any SpaceKit.Context, didTapAnnotationWithAlias alias: Swift.String, onLevelOrdinal levelOrdinal: Swift.Int)
  func spaceKitContext(_ context: any SpaceKit.Context, stateForAnnotationWithAlias alias: Swift.String) -> SpaceKit.MapAnnotationState
}
extension SpaceKit.SpaceKitMapDelegate {
  @available(*, deprecated)
  public func spaceKitContext(_ context: any SpaceKit.Context, didTapAnnotationWithAlias alias: Swift.String)
  public func spaceKitContext(_ context: any SpaceKit.Context, didTapAnnotationWithAlias alias: Swift.String, onLevelOrdinal levelOrdinal: Swift.Int)
}
public protocol SpaceKitViewController : UIKit.UIViewController {
  var contentLayoutGuide: UIKit.UILayoutGuide { get }
  var mapViewControls: any SpaceKit.SpaceKitInterfaceControls { get }
}
public enum SpaceKitButtonStack {
  case topNavigation
  case primaryActions
  case secondaryActions
  public static func == (a: SpaceKit.SpaceKitButtonStack, b: SpaceKit.SpaceKitButtonStack) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpaceKitButtonStackInsertionPoint {
  case top
  case bottom
  public static func == (a: SpaceKit.SpaceKitButtonStackInsertionPoint, b: SpaceKit.SpaceKitButtonStackInsertionPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SpaceKitInterfaceControls {
  func add(actionButtonItem: SpaceKit.SpaceKitActionButtonItem, in: SpaceKit.SpaceKitButtonStack, at: SpaceKit.SpaceKitButtonStackInsertionPoint)
  func remove(actionButtonItem: SpaceKit.SpaceKitActionButtonItem)
}
public struct HeatMapEvent : Swift.Codable {
  public let date: Foundation.Date
  public let alias: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HeatMap {
  public var eventStream: _Concurrency.AsyncStream<SpaceKit.HeatMapEvent> {
    get
  }
  @objc deinit
}
public struct ConfigurationKey : Swift.Hashable, Swift.RawRepresentable, Swift.Sendable, Swift.ExpressibleByStringLiteral {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public init(_ key: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias RawValue = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
public enum Event {
  public struct ItemProximity {
    public init(itemCode: Swift.String, threshold: Swift.Double)
  }
  public struct PathProximity {
    public init(itemCode: Swift.String, threshold: Swift.Double)
  }
  public struct EnterSection {
    public init(sectionIdentifier: Swift.String)
  }
  public struct BackgroundEnterSection {
    public init(sectionIdentifier: Swift.String)
  }
  public struct SectionProximity {
    public init(sectionIdentifier: Swift.String, threshold: Swift.Double)
  }
  public struct EnterLevel {
    public init(levelIdentifier: Swift.String)
    public init(ordinal: Swift.Int)
  }
  public struct ArrivedAtDestination {
    @available(*, deprecated, renamed: "init", message: "The distance threshold is no longer configurable.")
    public init(threshold: Swift.Double)
    public init()
  }
}
public enum TraversalOption : Swift.String, Swift.CaseIterable {
  case elevator
  case escalator
  case stairs
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SpaceKit.TraversalOption]
  public typealias RawValue = Swift.String
  public static var allCases: [SpaceKit.TraversalOption] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SpaceKit.SpaceKitViewControllerFactory : Swift.Sendable {}
extension SpaceKit.SpaceKitDestination.Priority : Swift.Equatable {}
extension SpaceKit.SpaceKitDestination.Priority : Swift.Hashable {}
extension SpaceKit.Requisite : Swift.Equatable {}
extension SpaceKit.Requisite : Swift.Hashable {}
extension SpaceKit.Requisite : Swift.RawRepresentable {}
extension SpaceKit.Theme.CornerStyle : Swift.Equatable {}
extension SpaceKit.Theme.CornerStyle : Swift.Hashable {}
extension SpaceKit.Theme.CornerStyle : Swift.RawRepresentable {}
extension SpaceKit.Theme.Font : Swift.Equatable {}
extension SpaceKit.Theme.Font : Swift.Hashable {}
extension SpaceKit.SpaceKitViewKey : Swift.Equatable {}
extension SpaceKit.SpaceKitViewKey : Swift.Hashable {}
extension SpaceKit.SpaceKitViewKey : Swift.RawRepresentable {}
extension SpaceKit.TraversalOption : Swift.Equatable {}
extension SpaceKit.TraversalOption : Swift.Hashable {}
extension SpaceKit.TraversalOption : Swift.RawRepresentable {}
extension SpaceKit.MapAnnotationState : Swift.Equatable {}
extension SpaceKit.MapAnnotationState : Swift.Hashable {}
extension SpaceKit.SpaceKitButtonStack : Swift.Equatable {}
extension SpaceKit.SpaceKitButtonStack : Swift.Hashable {}
extension SpaceKit.SpaceKitButtonStackInsertionPoint : Swift.Equatable {}
extension SpaceKit.SpaceKitButtonStackInsertionPoint : Swift.Hashable {}
extension SpaceKit.Event.ItemProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.PathProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.EnterSection : SpaceKit.EventTrigger {}
extension SpaceKit.Event.BackgroundEnterSection : SpaceKit.EventTrigger {}
extension SpaceKit.Event.SectionProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.EnterLevel : SpaceKit.EventTrigger {}
extension SpaceKit.Event.ArrivedAtDestination : SpaceKit.EventTrigger {}
