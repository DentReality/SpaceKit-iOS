// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SpaceKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import Combine
import CoreGraphics
import CoreLocation
import CoreVideo
import Foundation
import SceneKit
@_exported import SpaceKit
import Swift
import SwiftUI
import UIKit.UIImage
import UIKit
import UIKit.UIViewController
import Vision.VNTypes
import Vision
import _Concurrency
import _StringProcessing
public typealias InfoViewFactory = () -> SpaceKit.InfoView
@_Concurrency.MainActor public struct SpaceKitViewControllerFactory {
  @_Concurrency.MainActor public init(context: SpaceKit.Context, theme: SpaceKit.Theme = .default)
  @_Concurrency.MainActor public init(context: SpaceKit.Context, theme: SpaceKit.Theme = .default, infoViewFactory: @autoclosure @escaping SpaceKit.InfoViewFactory)
  @_Concurrency.MainActor public func make() -> SpaceKit.SpaceKitViewController
}
public typealias SpaceKitImage = UIKit.UIImage
public struct DestinationAdditionalInfoKey {
  public static let aisleName: Swift.String
}
public struct Destination {
  public enum Priority {
    case first
    case last
    case unspecified
    public static func == (a: SpaceKit.Destination.Priority, b: SpaceKit.Destination.Priority) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let identifier: Swift.String
  public let displayName: Swift.String
  public let icon: SpaceKit.SpaceKitImage?
  public let priority: SpaceKit.Destination.Priority
  public let additionalInfo: [Swift.String : Any]
  public init(identifier: Swift.String, displayName: Swift.String, icon: SpaceKit.SpaceKitImage?, priority: SpaceKit.Destination.Priority = .unspecified, additionalInfo: [Swift.String : Any] = [:])
}
public struct LevelTransition {
  public let traversalOption: SpaceKit.TraversalOption
  public let originOrdinal: Swift.Int
  public let destinationOrdinal: Swift.Int
}
public protocol SpaceKitListDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, didUpdateOrderedDestinations orderedDestinations: [SpaceKit.Destination], with levelTransitions: [[SpaceKit.LevelTransition]])
}
public enum Requisite : Swift.CaseIterable {
  case locationPermission
  case preciseLocationPermission
  case cameraPermission
  public static func == (a: SpaceKit.Requisite, b: SpaceKit.Requisite) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SpaceKit.Requisite]
  public static var allCases: [SpaceKit.Requisite] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SpaceKitRequisitesDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, requiresRequisites requisites: [SpaceKit.Requisite])
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncForEach(_ operation: (Self.Element) async throws -> Swift.Void) async rethrows
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentForEach(withPriority priority: _Concurrency.TaskPriority? = nil, _ operation: @escaping (Self.Element) async -> Swift.Void) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentForEach(withPriority priority: _Concurrency.TaskPriority? = nil, _ operation: @escaping (Self.Element) async throws -> Swift.Void) async throws
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncMap<T>(_ transform: (Self.Element) async throws -> T) async rethrows -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T) async -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T) async throws -> [T]
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncCompactMap<T>(_ transform: (Self.Element) async throws -> T?) async rethrows -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentCompactMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T?) async -> [T]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentCompactMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T?) async throws -> [T]
  #endif
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncFlatMap<T>(_ transform: (Self.Element) async throws -> T) async rethrows -> [T.Element] where T : Swift.Sequence
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentFlatMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async -> T) async -> [T.Element] where T : Swift.Sequence
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func concurrentFlatMap<T>(withPriority priority: _Concurrency.TaskPriority? = nil, _ transform: @escaping (Self.Element) async throws -> T) async throws -> [T.Element] where T : Swift.Sequence
  #endif
}
public protocol EventTrigger {
}
public protocol EventFactory {
  func makeEvent(_ trigger: SpaceKit.EventTrigger, handler: @escaping () -> Swift.Void) -> SpaceKit.SubscriptionEvent
}
final public class SpaceKitVenue {
  public init(from url: Foundation.URL)
  @objc deinit
}
extension SpaceKit.SpaceKitVenue : SpaceKit.Venue {
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchMetadata() async throws -> SpaceKit.VenueMetadata
  #endif
}
public protocol InfoViewIcon : AnyObject {
  var image: UIKit.UIImage? { get set }
}
public protocol InfoViewLabel : AnyObject {
  var text: Swift.String? { get set }
}
public protocol InfoViewButton : AnyObject {
  func addAction(_ action: @escaping () -> Swift.Void)
}
public protocol InfoView : UIKit.UIView {
  var iconView: SpaceKit.InfoViewIcon? { get }
  var displayNameLabel: SpaceKit.InfoViewLabel? { get }
  var gotItButton: SpaceKit.InfoViewButton? { get }
}
extension UIKit.UILabel : SpaceKit.InfoViewLabel {
}
extension UIKit.UIControl : SpaceKit.InfoViewButton {
  @_Concurrency.MainActor(unsafe) public func addAction(_ action: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class SpaceKitSubscriptionToken : Swift.Hashable {
  public static func == (lhs: SpaceKit.SpaceKitSubscriptionToken, rhs: SpaceKit.SpaceKitSubscriptionToken) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public enum NavigationLayout : Swift.Equatable {
  case map
  case ar
  case compass
  case scanner
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SpaceKit.NavigationLayout, b: SpaceKit.NavigationLayout) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SubscriptionEvent {
  var onFulfill: () -> Swift.Void { get set }
  func onSubscribe()
  func evaluateFulfilled() -> Swift.Bool
}
extension ARKit.ARSCNView {
  @_Concurrency.MainActor(unsafe) public var userSceneHeading: Swift.Float? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var userVerticalOrientation: Swift.Float {
    get
  }
}
public struct Theme {
  public enum CornerStyle : Swift.String, Swift.Decodable {
    case square
    case semiRounded
    case rounded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Font {
    case `default`
    public static func == (a: SpaceKit.Theme.Font, b: SpaceKit.Theme.Font) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ThemeColor {
    public init(base: UIKit.UIColor, light: UIKit.UIColor, dark: UIKit.UIColor)
    public let base: UIKit.UIColor
    public let light: UIKit.UIColor
    public let dark: UIKit.UIColor
  }
  public let primaryColor: SpaceKit.Theme.ThemeColor
  public let secondaryColor: SpaceKit.Theme.ThemeColor
  public let cornerStyle: SpaceKit.Theme.CornerStyle
  public let font: SpaceKit.Theme.Font
  public init(primaryColor: SpaceKit.Theme.ThemeColor, secondaryColor: SpaceKit.Theme.ThemeColor, cornerStyle: SpaceKit.Theme.CornerStyle, font: SpaceKit.Theme.Font)
}
extension SpaceKit.Theme {
  public static let `default`: SpaceKit.Theme
  public static let tealRounded: SpaceKit.Theme
  public static let purpleSquared: SpaceKit.Theme
}
public struct SpaceKitContextFactory {
  public init(venue: SpaceKit.Venue, isDebugEnabled: Swift.Bool = false)
  #if compiler(>=5.3) && $AsyncAwait
  public func make() async throws -> SpaceKit.Context
  #endif
}
public struct ScanResult : Swift.Equatable {
  public let stringValue: Swift.String
  public let symbology: Vision.VNBarcodeSymbology
  public init(stringValue: Swift.String, symbology: Vision.VNBarcodeSymbology)
  public static func == (a: SpaceKit.ScanResult, b: SpaceKit.ScanResult) -> Swift.Bool
}
public protocol SpaceKitBarcodeDelegate : AnyObject {
  func spaceKitContext(_ context: SpaceKit.Context, didScanBarcodeWithResult result: SpaceKit.ScanResult)
  func spaceKitContext(_ context: SpaceKit.Context, didScanBarcodeWithError error: Swift.Error)
}
public struct VenueManagerConfiguration {
  public let organizationIdentifier: Swift.String
  public init(organizationIdentifier: Swift.String)
}
public protocol LocalVenue {
  var identifier: Swift.String { get }
  var name: Swift.String { get }
  var region: SpaceKit.LocalVenueRegion { get }
}
public protocol LocalVenueRegion {
  var radiusMeters: Swift.Int { get }
  var centrePoint: CoreLocation.CLLocationCoordinate2D { get }
}
public protocol VenueMetadata {
  var hash: Swift.String { get }
  var timestamp: Foundation.Date { get }
}
public protocol Venue {
  #if compiler(>=5.3) && $AsyncAwait
  func fetchMetadata() async throws -> SpaceKit.VenueMetadata
  #endif
}
public protocol VenueManager {
  init(configuration: SpaceKit.VenueManagerConfiguration)
  #if compiler(>=5.3) && $AsyncAwait
  func fetchLocalVenues(forLocation location: CoreLocation.CLLocationCoordinate2D, searchRadius: Swift.Int, limit: Swift.Int) async throws -> [SpaceKit.LocalVenue]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func fetchMetadata(forVenueWithIdentifier venueIdentifier: Swift.String) async throws -> SpaceKit.VenueMetadata
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  func fetchVenue(forVenueWithIdentifier venueIdentifier: Swift.String, destinationPath: Swift.String) async throws -> SpaceKit.Venue
  #endif
}
public struct VenueManagerFactory {
  public init(configuration: SpaceKit.VenueManagerConfiguration)
  public func make() -> SpaceKit.VenueManager
}
public struct SpaceKitVenueMetadata : SpaceKit.VenueMetadata {
  public let hash: Swift.String
  public let version: Swift.Int
  public let timestamp: Foundation.Date
}
public struct SpaceKitLocalVenue : SpaceKit.LocalVenue {
  public let identifier: Swift.String
  public let name: Swift.String
  public let region: SpaceKit.LocalVenueRegion
}
public struct SpaceKitLocalVenueRegion : SpaceKit.LocalVenueRegion {
  public let radiusMeters: Swift.Int
  public let centrePoint: CoreLocation.CLLocationCoordinate2D
}
public protocol Context : AnyObject, SpaceKit.EventFactory {
  var requisitesDelegate: SpaceKit.SpaceKitRequisitesDelegate? { get set }
  var listDelegate: SpaceKit.SpaceKitListDelegate? { get set }
  var barcodeDelegate: SpaceKit.SpaceKitBarcodeDelegate? { get set }
  func setRoutingOptions(_ options: SpaceKit.RoutingOptions)
  func setDestinations(_ destinations: [SpaceKit.Destination])
  func requestUnfulfilledRequisites(from requisites: [SpaceKit.Requisite])
  func subscribeToEvent(_ subscriptionEvent: SpaceKit.SubscriptionEvent) -> SpaceKit.SpaceKitSubscriptionToken
  func unsubscribeFromEventWithSubscriptionToken(_ subscriptionToken: SpaceKit.SpaceKitSubscriptionToken)
}
public struct RoutingOptions {
  public init(traversalOptions: Swift.Set<SpaceKit.TraversalOption>)
}
public protocol SpaceKitViewController : UIKit.UIViewController {
  var contentLayoutGuide: UIKit.UILayoutGuide { get }
}
public enum Event {
  public struct ItemProximity {
    public init(itemCode: Swift.String, threshold: Swift.Double)
  }
  public struct PathProximity {
    public init(itemCode: Swift.String, threshold: Swift.Double)
  }
  public struct EnterSection {
    public init(sectionIdentifier: Swift.String)
  }
  public struct SectionProximity {
    public init(sectionIdentifier: Swift.String, threshold: Swift.Double)
  }
  public struct EnterLevel {
    public init(levelIdentifier: Swift.String)
  }
}
public enum TraversalOption : Swift.String, Swift.CaseIterable {
  case elevator
  case escalator
  case stairs
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SpaceKit.TraversalOption]
  public typealias RawValue = Swift.String
  public static var allCases: [SpaceKit.TraversalOption] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SpaceKit.SpaceKitViewControllerFactory : Swift.Sendable {}
extension SpaceKit.Destination.Priority : Swift.Equatable {}
extension SpaceKit.Destination.Priority : Swift.Hashable {}
extension SpaceKit.Requisite : Swift.Equatable {}
extension SpaceKit.Requisite : Swift.Hashable {}
extension SpaceKit.NavigationLayout : Swift.Hashable {}
extension SpaceKit.Theme.CornerStyle : Swift.Equatable {}
extension SpaceKit.Theme.CornerStyle : Swift.Hashable {}
extension SpaceKit.Theme.CornerStyle : Swift.RawRepresentable {}
extension SpaceKit.Theme.Font : Swift.Equatable {}
extension SpaceKit.Theme.Font : Swift.Hashable {}
extension SpaceKit.Event.ItemProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.PathProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.EnterSection : SpaceKit.EventTrigger {}
extension SpaceKit.Event.SectionProximity : SpaceKit.EventTrigger {}
extension SpaceKit.Event.EnterLevel : SpaceKit.EventTrigger {}
extension SpaceKit.TraversalOption : Swift.Equatable {}
extension SpaceKit.TraversalOption : Swift.Hashable {}
extension SpaceKit.TraversalOption : Swift.RawRepresentable {}
